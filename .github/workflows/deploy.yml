name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install Frontend Dependencies
      working-directory: frontend
      run: |
        npm ci
        echo "REACT_APP_API_URL=http://${{ secrets.EC2_PUBLIC_IP }}/api" > .env
        
    - name: Build Frontend
      working-directory: frontend
      run: |
        npm install react-scripts --save-dev
        npx react-scripts build
        
    - name: Install Backend Dependencies
      working-directory: backend
      run: npm ci
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_PUBLIC_IP }}
        USER: ec2-user
      run: |
        echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' > private_key.pem
        chmod 600 private_key.pem
        
        # Create deployment directory structure
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
          mkdir -p ~/app/frontend/build
          mkdir -p ~/app/backend
        '
        
        # Copy frontend build
        scp -o StrictHostKeyChecking=no -i private_key.pem -r frontend/build/* ${USER}@${HOST}:~/app/frontend/build/
        
        # Copy backend files
        scp -o StrictHostKeyChecking=no -i private_key.pem -r backend/* ${USER}@${HOST}:~/app/backend/
        
        # Create backend .env file
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} "
          cat > ~/app/backend/.env << 'EOL'
          PORT=5000
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=3306
          CORS_ORIGIN=http://${{ secrets.EC2_PUBLIC_IP }}
          EOL
        "
        
        # Install dependencies and start services
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
          # Install Node.js if not installed
          if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          # Install PM2 if not installed
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          cd ~/app/backend
          npm ci --production
          pm2 delete backend || true
          pm2 start server.js --name backend
          
          # Configure Nginx
          if ! command -v nginx &> /dev/null; then
            sudo yum install -y nginx
          fi
          
          sudo tee /etc/nginx/nginx.conf << EOL
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          include /usr/share/nginx/modules/*.conf;

          events {
              worker_connections 1024;
          }

          http {
              log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                              '\$status \$body_bytes_sent "\$http_referer" '
                              '"\$http_user_agent" "\$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;

              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              types_hash_max_size 4096;

              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;

              server {
                  listen       80;
                  server_name  _;
                  root         /home/ec2-user/app/frontend/build;

                  location / {
                      try_files \$uri \$uri/ /index.html;
                      add_header Cache-Control "no-cache, no-store, must-revalidate";
                  }

                  location /api/ {
                      proxy_pass http://localhost:5000/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  }
              }
          }
          EOL
          
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          
          # Ensure SELinux allows Nginx to proxy requests
          sudo setsebool -P httpd_can_network_connect 1
        '
        
        rm -f private_key.pem
