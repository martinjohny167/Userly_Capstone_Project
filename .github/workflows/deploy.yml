name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  ECR_BACKEND_REPO: ${{ secrets.ECR_BACKEND_REPO }}
  ECR_FRONTEND_REPO: ${{ secrets.ECR_FRONTEND_REPO }}

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # === STAGE 1: CodeQL Scan ===
  codeql-scan:
    name: CodeQL Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze code
        uses: github/codeql-action/analyze@v3

  # === STAGE 2: Build & Push Docker Images ===
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: codeql-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend Docker image
        run: |
          docker build -t ${{ env.ECR_BACKEND_REPO }}:latest ./backend

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ env.ECR_FRONTEND_REPO }}:latest ./frontend

      - name: Push backend image to ECR
        run: |
          docker push ${{ env.ECR_BACKEND_REPO }}:latest

      - name: Push frontend image to ECR
        run: |
          docker push ${{ env.ECR_FRONTEND_REPO }}:latest

  # === STAGE 3: Test ===
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Start MySQL for tests
        run: |
          docker run --name test-mysql \
            -e MYSQL_ROOT_PASSWORD= \
            -e MYSQL_DATABASE=test_db \
            -p 3306:3306 \
            -d mysql:5.7

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            docker exec test-mysql mysqladmin ping -h127.0.0.1 -uroot && break
            echo "MySQL not ready yet... retrying ($i/30)"
            sleep 2
          done

      - name: Run tests/user.test.js directly with Jest
        working-directory: ./backend
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ""
          DB_NAME: test_db
          JWT_SECRET: testsecret
        run: |
          npx jest tests/user.test.js --detectOpenHandles --forceExit

      - name: Tear down MySQL
        if: always()
        run: docker rm -f test-mysql

  # === STAGE 4: Deploy to EC2 ===
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: SSH and deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            cd ~/app
            echo "${{ secrets.BACKEND_ENV_CONTENT }}" > .env

            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $(echo "${{ env.ECR_BACKEND_REPO }}" | cut -d'/' -f1)

            docker pull ${{ env.ECR_BACKEND_REPO }}:latest
            docker pull ${{ env.ECR_FRONTEND_REPO }}:latest

            docker-compose down || true
            docker-compose up -d --remove-orphans

      - name: Deployment Success - Show Frontend URL
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend is live at: http://54.91.162.58:3000/"
