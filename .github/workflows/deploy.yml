name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          **/node_modules
          ~/.npm
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-modules-

    - name: Install and Build Frontend
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit
        echo "REACT_APP_API_URL=http://${{ secrets.EC2_PUBLIC_IP }}/api" > .env
        npm run build --if-present
        
    - name: Install Backend Dependencies
      working-directory: backend
      run: npm ci --prefer-offline --no-audit
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_PUBLIC_IP }}
        USER: ec2-user
      run: |
        # Setup SSH
        echo "$PRIVATE_KEY" > deploy-key.pem
        chmod 600 deploy-key.pem
        
        # Optimize SSH connections
        cat >> ~/.ssh/config << EOL
        Host ec2
          HostName $HOST
          User $USER
          IdentityFile $PWD/deploy-key.pem
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOL
        
        # Create directories and prepare for deployment
        ssh ec2 'mkdir -p ~/app/{frontend/build,backend}'
        
        # Parallel file transfer using tar for compression
        (tar czf - -C frontend/build/ .) | ssh ec2 'cd ~/app/frontend/build && tar xzf -' &
        (tar czf - -C backend/ .) | ssh ec2 'cd ~/app/backend && tar xzf -' &
        wait
        
        # Configure and deploy
        ssh ec2 "
          # Update backend environment
          cat > ~/app/backend/.env << 'EOL'
          PORT=5000
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=3306
          CORS_ORIGIN=http://${{ secrets.EC2_PUBLIC_IP }}
          EOL

          # Install or update dependencies
          if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          if ! command -v nginx &> /dev/null; then
            sudo amazon-linux-extras install -y nginx1
          fi
          
          # Update backend and restart service
          cd ~/app/backend
          npm ci --prefer-offline --no-audit --production
          pm2 delete backend 2>/dev/null || true
          pm2 start server.js --name backend
          
          # Configure Nginx with optimizations
          sudo tee /etc/nginx/nginx.conf << 'EOL'
          user nginx;
          worker_processes auto;
          worker_rlimit_nofile 65535;
          error_log /var/log/nginx/error.log warn;
          pid /run/nginx.pid;

          events {
              worker_connections 2048;
              multi_accept on;
              use epoll;
          }

          http {
              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;
              
              # Optimization settings
              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              types_hash_max_size 2048;
              
              # Compression
              gzip               on;
              gzip_vary          on;
              gzip_proxied       any;
              gzip_comp_level    6;
              gzip_buffers       16 8k;
              gzip_http_version  1.1;
              gzip_min_length    256;
              gzip_types         text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
              
              # File handle caching
              open_file_cache max=1000 inactive=20s;
              open_file_cache_valid 30s;
              open_file_cache_min_uses 2;
              open_file_cache_errors on;
              
              server {
                  listen       80;
                  server_name  _;
                  root         /home/ec2-user/app/frontend/build;

                  location / {
                      try_files \$uri \$uri/ /index.html;
                      expires -1;
                      add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
                  }

                  location /api/ {
                      proxy_pass http://localhost:5000/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                      
                      # Timeouts
                      proxy_connect_timeout 60s;
                      proxy_send_timeout 60s;
                      proxy_read_timeout 60s;
                  }
                  
                  # Static file caching
                  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                      expires 30d;
                      add_header Cache-Control 'public, no-transform';
                  }
              }
          }
          EOL
          
          # Restart services
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          sudo setsebool -P httpd_can_network_connect 1
          
          # Verify services are running
          pm2 list
          sudo systemctl status nginx --no-pager
        "
        
        rm -f deploy-key.pem 
