name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate cache key
      id: cache-key
      run: echo "value=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        
    - name: Cache Frontend Dependencies
      uses: actions/cache@v3
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-
    
    - name: Cache Backend Dependencies
      uses: actions/cache@v3
      with:
        path: |
          backend/node_modules
          ~/.npm
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install and Build Frontend
      working-directory: frontend
      run: |
        npm ci --prefer-offline
        echo "REACT_APP_API_URL=http://${{ secrets.EC2_PUBLIC_IP }}/api" > .env
        npm run build
        
    - name: Install Backend Dependencies
      working-directory: backend
      run: npm ci --prefer-offline
        
    - name: Upload Frontend Build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
        
    - name: Upload Backend Files
      uses: actions/upload-artifact@v3
      with:
        name: backend-files
        path: backend

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
        
    - name: Download Backend Files
      uses: actions/download-artifact@v3
      with:
        name: backend-files
        path: backend
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_PUBLIC_IP }}
        USER: ec2-user
      run: |
        echo "$PRIVATE_KEY" > deploy-key.pem
        chmod 600 deploy-key.pem
        
        # Create directories and copy files in parallel
        ssh -i deploy-key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} 'mkdir -p ~/app/{frontend/build,backend}'
        
        # Use tar for faster file transfer
        tar czf - frontend/build/* | ssh -i deploy-key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} 'cd ~/app && tar xzf -'
        tar czf - backend/* | ssh -i deploy-key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} 'cd ~/app && tar xzf -'
        
        # Create backend .env and configure services
        ssh -i deploy-key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} "
          # Create backend .env
          cat > ~/app/backend/.env << 'EOL'
          PORT=5000
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=3306
          CORS_ORIGIN=http://${{ secrets.EC2_PUBLIC_IP }}
          EOL

          # Install dependencies if needed
          if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
            sudo yum install -y nodejs
          fi
          
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          if ! command -v nginx &> /dev/null; then
            sudo amazon-linux-extras install nginx1
          fi
          
          # Update backend and restart service
          cd ~/app/backend
          npm ci --production --prefer-offline
          pm2 delete backend || true
          pm2 start server.js --name backend
          
          # Configure and restart Nginx
          sudo tee /etc/nginx/nginx.conf << 'EOL'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          events {
              worker_connections 1024;
          }

          http {
              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;
              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              gzip               on;
              gzip_types         text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
              
              server {
                  listen       80;
                  server_name  _;
                  root         /home/ec2-user/app/frontend/build;

                  location / {
                      try_files \$uri \$uri/ /index.html;
                      expires -1;
                      add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
                  }

                  location /api/ {
                      proxy_pass http://localhost:5000/;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection "upgrade";
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  }
              }
          }
          EOL
          
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          sudo setsebool -P httpd_can_network_connect 1
        "
        
        rm -f deploy-key.pem
// ... existing code ...
