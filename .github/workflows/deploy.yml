name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  ECR_BACKEND_REPO: ${{ secrets.ECR_BACKEND_REPO }}
  ECR_FRONTEND_REPO: ${{ secrets.ECR_FRONTEND_REPO }}
  DB_HOST: ${{ secrets.TEST_DB_HOST }}
  DB_USER: ${{ secrets.TEST_DB_USER }}
  DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
  DB_NAME: ${{ secrets.TEST_DB_NAME }}

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # === STAGE 1: CodeQL Scan ===
  codeql-scan:
    name: CodeQL Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze code
        uses: github/codeql-action/analyze@v3

  # === STAGE 2: Run Tests ===
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: codeql-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create Backend Test Environment File
        working-directory: ./backend
        run: |
          echo "DB_HOST=${{ env.DB_HOST }}" > .env.test
          echo "DB_USER=${{ env.DB_USER }}" >> .env.test
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> .env.test
          echo "DB_NAME=${{ env.DB_NAME }}" >> .env.test

      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false

  # === STAGE 3: Build & Push Docker Images ===
  docker-build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend Docker image
        run: |
          docker build -t ${{ env.ECR_BACKEND_REPO }}:latest ./backend

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ env.ECR_FRONTEND_REPO }}:latest ./frontend

      - name: Push backend image to ECR
        run: |
          docker push ${{ env.ECR_BACKEND_REPO }}:latest

      - name: Push frontend image to ECR
        run: |
          docker push ${{ env.ECR_FRONTEND_REPO }}:latest

  # === STAGE 4: Deploy to EC2 ===
  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - name: SSH and deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            cd ~/app
            echo "${{ secrets.BACKEND_ENV_CONTENT }}" > .env

            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $(echo "${{ env.ECR_BACKEND_REPO }}" | cut -d'/' -f1)

            docker pull ${{ env.ECR_BACKEND_REPO }}:latest
            docker pull ${{ env.ECR_FRONTEND_REPO }}:latest

            docker-compose down || true
            docker-compose up -d --remove-orphans

      - name: Deployment Success - Show Frontend URL
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend is live at: http://54.91.162.58:3000/"
